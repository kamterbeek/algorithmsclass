const readline = require('readline');

// Function to fetch the word list from the specified URL and convert it into an array
async function getWordList(url) {
    const response = await fetch(url);
    const text = await response.text();
    return text.trim().split('\n');
}

// Function to search for rhymes based on the last three characters of a word
async function RhymeSearch(word, wordArray) {
    console.log(`Searching for rhymes for the word: ${word}`);

    if (!word) {
        return 'No word entered. Exiting.';
    }

    const targetSuffix = word.slice(-3);

    console.log(`Searching for words with the suffix: ${targetSuffix}`);

    const matchingWords = [];
    for (let i = 0; i < wordArray.length; i++) {
        const currentSuffix = wordArray[i].slice(-3);
        if (currentSuffix === targetSuffix) {
            matchingWords.push(wordArray[i]);
        }
    }

    if (matchingWords.length > 0) {
        return 'Matching rhymes: ' + matchingWords.join(', ');
    } else {
        return 'There are no matching rhymes.';
    }
}

// Function to prompt the user for input, fetch the word list, and search for rhymes
async function promptAndSearch() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question('Enter a word to search for rhymes: ', async (word) => {
        rl.close();

        const wordArray = await getWordList('https://introcs.cs.princeton.edu/java/data/wordlist.txt');
        const result = await RhymeSearch(word, wordArray);

        console.log(result);
    });
}

// Call the promptAndSearch function to start the search process
promptAndSearch();
